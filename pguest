#!/usr/bin/env python
# vi: ft=python

import argparse
import os
import random
import requests
import subprocess
import sys
import time
import signal

# Remove untrusted SSL warnings
requests.packages.urllib3.disable_warnings()

# Constants
SLEEP_TIME = 5
DEBUG_TIME = 120
TIMEOUT = 5
ERROR_BACKOFF = 60

DEFAULT_WIFI_INTERFACE = 'en0'
DEFAULT_WIFI_SERVICE = 'Wi-Fi'
DEFAULT_WIFI_SSID = 'PGuest'
DEFAULT_SPOOF_TIMEOUT = 60  # 1min

CHR_SPOOF = unichr(10558)
CHR_WIFI_DOWN = unichr(10597)
CHR_WIFI_UP = unichr(10595)

AIRPORT_PATH = '/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport'

# User data
global USERNAME
global PASSWORD


def sig_handle(signal, frame):
    sys.exit(0)


# Check google.com
def check_google(debug=False):
    try:
        check_google = requests.get(
            'http://google.com/',
            timeout=TIMEOUT,
            verify=False,
        )

        if 'server' in check_google.headers:
            # Valid google.com response
            if check_google.headers['server'] == 'gws':
                return 0

        if 'location' in check_google.headers:
            # Un-auth'd Pguest response
            if check_google.headers['location'] == \
                    'https://1.1.1.1/login.html?redirect=google.com/':
                return -1

    except Exception, e:
        # DNS fail?, No Internet access?, etc.
        if debug:
            print ""
            print "Exception doing google.com request: %s" % str(e)
        return 1

    if debug:
        # If 'server' isn't == 'gws', then what is it?
        if 'server' in check_google.headers:
            print ""
            print "google.com server header: %s" % (
                check_google.headers['server']
            )

    return -1


# Split lines at : chars, returning a dict items list
def dict_items_from_properties(text):
    return [
        [part.strip() for part in line.split(':', 1)]
        for line in text.split('\n')
        if ':' in line
    ]


# Call a command, splitting lines at : chars, returning a dict items list
def dict_items_from_command(command_call, name):
    try:
        return dict_items_from_properties(
            subprocess.check_output(command_call)
        )
    except subprocess.CalledProcessError, e:
        print "Unable to get %s: %s" % (name, e)
        return None


# Get Wi-Fi details
def wifi_status(service_name):
    dict_items = []

    more_dict_items = dict_items_from_command(
        [AIRPORT_PATH, '-I'],
        'physical Wi-Fi details',
    )
    if more_dict_items:
        dict_items += more_dict_items

    more_dict_items = dict_items_from_command(
        ['networksetup', '-getinfo', service_name],
        'TCP protocol details',
    )
    if more_dict_items:
        dict_items += more_dict_items

    out_dict = dict(dict_items)
    for key, value in dict_items:
        if value in ('none', '(null)'):
            out_dict[key] = None

    return out_dict


# Change to a new MAC address
def spoof_mac(interface_name):
    new_mac = ':'.join([
        '%02x' % random.randint(0,255)
        for i in range(6)
    ])
    command_call = ['ifconfig', interface_name, 'ether', new_mac]
    try:
        subprocess.check_call(command_call)
        sys.stdout.write(CHR_SPOOF)
        sys.stdout.write(' ')
        return True
    except subprocess.CalledProcessError, e:
        print "Unable to spoof MAC address: %s" % e
        return False

# Turn Wi-Fi off and on again
def bounce_wifi(interface_name):
    command_call_prefix = ['networksetup', '-setairportpower', interface_name]
    try:
        for wifi_status, char in (('off', CHR_WIFI_DOWN), ('on', CHR_WIFI_UP)):
            subprocess.check_call(command_call_prefix + [wifi_status])
            sys.stdout.write(char)
            sys.stdout.write(' ')

    except subprocess.CalledProcessError, e:
        print "Unable to turn Wi-Fi %s: %s" % (wifi_status, e)
        return False

    return True


# Spoop MAC and bounce when there's no route set
def fix_ip(interface_name, service_name):
    wifi_status_dict = wifi_status(service_name)
    wifi_running = wifi_status_dict.get('state', None) == 'running'
    wifi_no_route = wifi_status_dict.get('Router', None) is None
    if wifi_running and wifi_no_route:
        spoofed = spoof_mac(interface_name)
        bounced = bounce_wifi(interface_name)

        return spoofed and bounced

    return False


# Attempt PGuest auth
def pguest_auth(debug=False):
    try:
        print "Google server is not 'gws', attempting PGuest auth"

        pguest_form = {
            "username":      USERNAME,
            "password":      PASSWORD,
            "buttonClicked": 4,
            "err_flag":      0,
            "err_msg":       "",
            "info_flag":     0,
            "info_msg":      "",
            "redirect_url":  "",
        }

        pguest_attempt = requests.post(
            'https://1.1.1.1/login.html',
            data=pguest_form,
            timeout=10,
            verify=False,
        )

        content = pguest_attempt.text

        if debug:
            print ""
            print "PGUEST DEBUG INFO:"
            print "HTTP Status Code: %d" % pguest_attempt.status_code
            print "HTTP Headers: %s" % pguest_attempt.headers

        if pguest_attempt.status_code == 200:

            # Scan for failed login
            for line in content.split("\n"):
                if line == """<INPUT TYPE="hidden" NAME="err_flag" SIZE="16" MAXLENGTH="15" VALUE="1">""":
                    return 2

            return 0

        return -1

    except Exception, e:
        if debug:
            print ""
            print "Exception doing PGuest authentication: %s" % str(e)
        return 1


if __name__ == "__main__":

    signal.signal(signal.SIGINT, sig_handle)

    # Parse args
    parser = argparse.ArgumentParser(
        description="Check if google is accessable,"
            " else authenticate to PGuest",
    )
    # XXX Todo: make -u and -p mutually exclusive to -c
    parser.add_argument('-u', '--username',
        help='The username for authentication',
        default=None,
    )
    parser.add_argument('-p', '--password',
        help='The password for authentication',
        default=None,
    )
    parser.add_argument('-n', '--wifi-ssid',
        help="PGuest SSID",
        default=DEFAULT_WIFI_SSID,
    )
    parser.add_argument('-i', '--wifi-interface',
        help='Wi-Fi interface name',
        default=DEFAULT_WIFI_INTERFACE,
    )
    parser.add_argument('-s', '--wifi-service',
        help="Wi-Fi service name",
        default=DEFAULT_WIFI_SERVICE,
    )
    parser.add_argument('-t', '--spoof-timeout',
        help="Minimum time (seconds)  between MAC spoofing",
        default=DEFAULT_SPOOF_TIMEOUT,
    )
    parser.add_argument('--no-mac-spoof',
        help="Don't spoof the MAC address before auth",
        default=False, action='store_true',
    )
    parser.add_argument('-c', '--config',
        help='Path to username and password',
        default='~/.pguest',
    )
    args = parser.parse_args()

    USERNAME = None
    PASSWORD = None
    WIFI_INTERFACE = DEFAULT_WIFI_INTERFACE
    WIFI_SERVICE = DEFAULT_WIFI_SERVICE
    WIFI_SSID = DEFAULT_WIFI_SSID
    SPOOF_TIMEOUT = DEFAULT_SPOOF_TIMEOUT
    SOURCE = None

    config_file = os.path.expanduser(args.config)

    if os.path.isfile(config_file):
        SOURCE = "file"
        try:
            with open(config_file) as f:
                for line in f:
                    name, var = line.partition("=")[::2]
                    name = name.lower().strip()
                    var = var.strip()
                    if name == "username":
                        USERNAME = var
                    elif name == "password":
                        PASSWORD = var
                    elif name == 'wifi_interface':
                        WIFI_INTERFACE = var
                    elif name == 'wifi_service':
                        WIFI_SERVICE = var
                    elif name == 'wifi_ssid':
                        WIFI_SSID = var
                    elif name == 'spoof_timeout':
                        SPOOF_TIMEOUT = var
        except IOError:
            print "IOError on reading config file %s" % config_file
            exit(1)
    else:
        SOURCE = "args"
        USERNAME = args.username
        PASSWORD = args.password
        WIFI_INTERFACE = args.wifi_interface
        WIFI_SERVICE = args.wifi_service
        WIFI_SSID = args.wifi_ssid

    if (USERNAME is None) or (PASSWORD is None):
        sys.stdout.write("Incomplete credentials specified by %s" % SOURCE)
        if SOURCE == "file":
            print ": %s" % config_file
        else:
            print ""
        exit(1)

    first_time = True
    last_auth = 0
    last_spoof = 0
    debug = False

    while True:
        if first_time:
            first_time = False
            print ""
            print "Legend:"
            print u" \u2713: Everything is fine"
            print u" \u2717: PGuest authentication required"
            print u" !: PGuest authentication failed (non-200 HTTP response)"
            print u" ?: Couldn't reach google.com, or the PGuest login page"
            print u" %s: MAC address spoofed" % CHR_SPOOF
            print u" %s: Wi-Fi interface turned off" % CHR_WIFI_DOWN
            print u" %s: Wi-Fi interface turned on" % CHR_WIFI_UP
            print u" -: Not connected to PGuest SSID"
            print ""
        elif (
                ((time.time() - last_auth) > DEBUG_TIME) and
                (debug)
        ):
            debug = False
            print ""
            print "Last auth was more than %d seconds ago," \
                " disabling extra debuging information." % DEBUG_TIME

        if wifi_status(WIFI_SERVICE).get('SSID', None) == WIFI_SSID:
            google_result = check_google(debug=debug)
            if google_result == -1:
                print u'\u2717 %s' % time.strftime('%Y-%m-%d %H:%M:%S')

                if (
                        ((time.time() - last_auth) < DEBUG_TIME) and
                        (not debug)
                ):
                    debug = True
                    print ""
                    print "Last auth was less than %d seconds ago," \
                        " showing extra debuging information." % DEBUG_TIME

                pguest_result = pguest_auth(debug=debug)
                if pguest_result == -1:
                    sys.stdout.write('! ')
                    sys.stdout.flush()
                elif pguest_result == 0:
                    last_auth = time.time()
                    sys.stdout.write("PGuest auth returned 200")
                    for i in range(0, SLEEP_TIME):
                        time.sleep(1)
                        sys.stdout.write(".")
                        sys.stdout.flush()
                    print ""
                    continue
                elif pguest_result == 2:
                    print ""
                    print "Login failed!"
                    print "Your credentials are incorrect or expired."
                    print ""
                    time.sleep(ERROR_BACKOFF)
                    continue
            elif google_result == 0:
                sys.stdout.write(u'\u2713 ')
                sys.stdout.flush()
            else:
                sys.stdout.write('? ')
                sys.stdout.flush()

                time_since_spoof = time.time() - last_spoof
                if not args.no_mac_spoof and time_since_spoof > SPOOF_TIMEOUT:
                    if fix_ip(WIFI_INTERFACE, WIFI_SERVICE):
                         last_spoof = time.time()
        else:
            sys.stdout.write('- ')
            sys.stdout.flush()

        time.sleep(SLEEP_TIME)  # XXX Todo: Make configurable
